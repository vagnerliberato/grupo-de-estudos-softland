# Language zh-CN translations for PACKAGE package.
# Automatically generated, 2010.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-01 20:08+0000\n"
"PO-Revision-Date: 2010-07-01 20:08+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-CN\n"

#. Tag: title
#: architecture.xml:30
#, no-c-format
msgid "Architecture"
msgstr ""

#. Tag: title
#: architecture.xml:33
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: architecture.xml:35
#, no-c-format
msgid ""
"Hibernate Search consists of an indexing component and an index search "
"component. Both are backed by Apache Lucene."
msgstr ""

#. Tag: para
#: architecture.xml:38
#, no-c-format
msgid ""
"Each time an entity is inserted, updated or removed in/from the database, "
"Hibernate Search keeps track of this event (through the Hibernate event "
"system) and schedules an index update. All the index updates are handled "
"without you having to use the Apache Lucene APIs (see <xref linkend=\"search-"
"configuration-event\"/>)."
msgstr ""

#. Tag: para
#: architecture.xml:44
#, no-c-format
msgid ""
"To interact with Apache Lucene indexes, Hibernate Search has the notion of "
"<classname>DirectoryProvider</classname>s. A directory provider will manage "
"a given Lucene <classname>Directory</classname> type. You can configure "
"directory providers to adjust the directory target (see <xref linkend="
"\"search-configuration-directory\"/>)."
msgstr ""

#. Tag: para
#: architecture.xml:50
#, no-c-format
msgid ""
"Hibernate Search uses the Lucene index to search an entity and return a list "
"of managed entities saving you the tedious object to Lucene document "
"mapping. The same persistence context is shared between Hibernate and "
"Hibernate Search. As a matter of fact, the <classname>FullTextSession</"
"classname> is built on top of the Hibernate Session. so that the application "
"code can use the unified <classname>org.hibernate.Query</classname> or "
"<classname>javax.persistence.Query</classname> APIs exactly the way a HQL, "
"JPA-QL or native queries would do."
msgstr ""

#. Tag: para
#: architecture.xml:60
#, no-c-format
msgid ""
"To be more efficient, Hibernate Search batches the write interactions with "
"the Lucene index. There is currently two types of batching depending on the "
"expected scope. Outside a transaction, the index update operation is "
"executed right after the actual database operation. This scope is really a "
"no scoping setup and no batching is performed. However, it is recommended - "
"for both your database and Hibernate Search - to execute your operation in a "
"transaction be it JDBC or JTA. When in a transaction, the index update "
"operation is scheduled for the transaction commit phase and discarded in "
"case of transaction rollback. The batching scope is the transaction. There "
"are two immediate benefits:"
msgstr ""

#. Tag: para
#: architecture.xml:73
#, no-c-format
msgid ""
"Performance: Lucene indexing works better when operation are executed in "
"batch."
msgstr ""

#. Tag: para
#: architecture.xml:78
#, no-c-format
msgid ""
"ACIDity: The work executed has the same scoping as the one executed by the "
"database transaction and is executed if and only if the transaction is "
"committed. This is not ACID in the strict sense of it, but ACID behavior is "
"rarely useful for full text search indexes since they can be rebuilt from "
"the source at any time."
msgstr ""

#. Tag: para
#: architecture.xml:86
#, no-c-format
msgid ""
"You can think of those two scopes (no scope vs transactional) as the "
"equivalent of the (infamous) autocommit vs transactional behavior. From a "
"performance perspective, the <emphasis>in transaction</emphasis> mode is "
"recommended. The scoping choice is made transparently. Hibernate Search "
"detects the presence of a transaction and adjust the scoping."
msgstr ""

#. Tag: note
#: architecture.xml:92
#, no-c-format
msgid ""
"Hibernate Search works perfectly fine in the Hibernate / EntityManager long "
"conversation pattern aka. atomic conversation."
msgstr ""

#. Tag: note
#: architecture.xml:96
#, no-c-format
msgid ""
"Depending on user demand, additional scoping will be considered, the "
"pluggability mechanism being already in place."
msgstr ""

#. Tag: title
#: architecture.xml:102
#, no-c-format
msgid "Back end"
msgstr ""

#. Tag: para
#: architecture.xml:104
#, no-c-format
msgid ""
"Hibernate Search offers the ability to let the scoped work being processed "
"by different back ends. Two back ends are provided out of the box for two "
"different scenarios."
msgstr ""

#. Tag: title
#: architecture.xml:109
#, no-c-format
msgid "Back end types"
msgstr ""

#. Tag: title
#: architecture.xml:112
#, no-c-format
msgid "Lucene"
msgstr ""

#. Tag: para
#: architecture.xml:114
#, no-c-format
msgid ""
"In this mode, all index update operations applied on a given node (JVM) will "
"be executed to the Lucene directories (through the directory providers) by "
"the same node. This mode is typically used in non clustered environment or "
"in clustered environments where the directory store is shared."
msgstr ""

#. Tag: para
#: architecture.xml:132
#, no-c-format
msgid "Lucene back end configuration."
msgstr ""

#. Tag: para
#: architecture.xml:136
#, no-c-format
msgid ""
"This mode targets non clustered applications, or clustered applications "
"where the Directory is taking care of the locking strategy."
msgstr ""

#. Tag: para
#: architecture.xml:140
#, no-c-format
msgid ""
"The main advantage is simplicity and immediate visibility of the changes in "
"Lucene queries (a requirement in some applications)."
msgstr ""

#. Tag: title
#: architecture.xml:145
#, no-c-format
msgid "<title>JMS</title>"
msgstr ""

#. Tag: para
#: architecture.xml:147
#, no-c-format
msgid ""
"All index update operations applied on a given node are sent to a JMS queue. "
"A unique reader will then process the queue and update the master index. The "
"master index is then replicated on a regular basis to the slave copies. This "
"is known as the master/slaves pattern. The master is the sole responsible "
"for updating the Lucene index. The slaves can accept read as well as write "
"operations. However, they only process the read operation on their local "
"index copy and delegate the update operations to the master."
msgstr ""

#. Tag: para
#: architecture.xml:167
#, no-c-format
msgid "JMS back end configuration."
msgstr ""

#. Tag: para
#: architecture.xml:171
#, no-c-format
msgid ""
"This mode targets clustered environments where throughput is critical, and "
"index update delays are affordable. Reliability is ensured by the JMS "
"provider and by having the slaves working on a local copy of the index."
msgstr ""

#. Tag: title
#: architecture.xml:178
#, no-c-format
msgid "JGroups"
msgstr ""

#. Tag: para
#: architecture.xml:180
#, no-c-format
msgid ""
"The JGroups based back end works similarly as the JMS one. Designed on the "
"same master/slave pattern, instead of JMS the JGroups toolkit is used as a "
"replication mechanism. This back end can be used as an alternative to JMS "
"one when response time is still critical, but i.e. JNDI service is not "
"available."
msgstr ""

#. Tag: note
#: architecture.xml:186
#, no-c-format
msgid ""
"Hibernate Search is an extensible architecture. Feel free to drop ideas for "
"other third party back ends to <literal>hibernate-dev@lists.jboss.org</"
"literal>."
msgstr ""

#. Tag: title
#: architecture.xml:192
#, no-c-format
msgid "Work execution"
msgstr ""

#. Tag: para
#: architecture.xml:194
#, no-c-format
msgid ""
"The indexing work (done by the back end) can be executed synchronously with "
"the transaction commit (or update operation if out of transaction), or "
"asynchronously."
msgstr ""

#. Tag: title
#: architecture.xml:199
#, no-c-format
msgid "Synchronous"
msgstr ""

#. Tag: para
#: architecture.xml:201
#, no-c-format
msgid ""
"This is the safe mode where the back end work is executed in concert with "
"the transaction commit. Under highly concurrent environment, this can lead "
"to throughput limitations (due to the Apache Lucene lock mechanism) and it "
"can increase the system response time if the backend is significantly slower "
"than the transactional process and if a lot of IO operations are involved."
msgstr ""

#. Tag: title
#: architecture.xml:210
#, no-c-format
msgid "Asynchronous"
msgstr ""

#. Tag: para
#: architecture.xml:212
#, no-c-format
msgid ""
"This mode delegates the work done by the back end to a different thread. "
"That way, throughput and response time are (to a certain extend) "
"decorrelated from the back end performance. The drawback is that a small "
"delay appears between the transaction commit and the index update and a "
"small overhead is introduced to deal with thread management."
msgstr ""

#. Tag: para
#: architecture.xml:219
#, no-c-format
msgid ""
"It is recommended to use synchronous execution first and evaluate "
"asynchronous execution if performance problems occur and after having set up "
"a proper benchmark (ie not a lonely cowboy hitting the system in a "
"completely unrealistic way)."
msgstr ""

#. Tag: title
#: architecture.xml:228
#, no-c-format
msgid "Reader strategy"
msgstr ""

#. Tag: para
#: architecture.xml:230
#, no-c-format
msgid ""
"When executing a query, Hibernate Search interacts with the Apache Lucene "
"indexes through a reader strategy. Choosing a reader strategy will depend on "
"the profile of the application (frequent updates, read mostly, asynchronous "
"index update etc). See also"
msgstr ""

#. Tag: title
#: architecture.xml:237
#, no-c-format
msgid "Shared"
msgstr ""

#. Tag: para
#: architecture.xml:239
#, no-c-format
msgid ""
"With this strategy, Hibernate Search will share the same "
"<classname>IndexReader</classname>, for a given Lucene index, across "
"multiple queries and threads provided that the <classname>IndexReader</"
"classname> is still up-to-date. If the <classname>IndexReader</classname> is "
"not up-to-date, a new one is opened and provided. Each "
"<classname>IndexReader</classname> is made of several "
"<classname>SegmentReader</classname>s. This strategy only reopens segments "
"that have been modified or created after last opening and shares the already "
"loaded segments from the previous instance. This strategy is the default."
msgstr ""

#. Tag: para
#: architecture.xml:250
#, no-c-format
msgid "The name of this strategy is <literal>shared</literal>."
msgstr ""

#. Tag: title
#: architecture.xml:254
#, no-c-format
msgid "Not-shared"
msgstr ""

#. Tag: para
#: architecture.xml:256
#, no-c-format
msgid ""
"Every time a query is executed, a Lucene <classname>IndexReader</classname> "
"is opened. This strategy is not the most efficient since opening and warming "
"up an <classname>IndexReader</classname> can be a relatively expensive "
"operation."
msgstr ""

#. Tag: para
#: architecture.xml:262
#, no-c-format
msgid "The name of this strategy is <literal>not-shared</literal>."
msgstr ""

#. Tag: title
#: architecture.xml:266
#, no-c-format
msgid "Custom"
msgstr ""

#. Tag: para
#: architecture.xml:268
#, no-c-format
msgid ""
"You can write your own reader strategy that suits your application needs by "
"implementing <classname>org.hibernate.search.reader.ReaderProvider</"
"classname>. The implementation must be thread safe."
msgstr ""
