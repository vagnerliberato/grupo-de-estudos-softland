# Language zh-CN translations for PACKAGE package.
# Automatically generated, 2010.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-07-01 20:08+0000\n"
"PO-Revision-Date: 2010-07-01 20:08+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh-CN\n"

#. Tag: title
#: query.xml:30
#, no-c-format
msgid "Querying"
msgstr ""

#. Tag: para
#: query.xml:32
#, no-c-format
msgid ""
"The second most important capability of Hibernate Search is the ability to "
"execute a Lucene query and retrieve entities managed by an Hibernate "
"session, providing the power of Lucene without leaving the Hibernate "
"paradigm, and giving another dimension to the Hibernate classic search "
"mechanisms (HQL, Criteria query, native SQL query). Preparing and executing "
"a query consists of four simple steps:"
msgstr ""

#. Tag: para
#: query.xml:41
#, no-c-format
msgid "Creating a <classname>FullTextSession</classname>"
msgstr ""

#. Tag: para
#: query.xml:45
#, no-c-format
msgid "<para>Creating a Lucene query</para>"
msgstr ""

#. Tag: para
#: query.xml:49
#, no-c-format
msgid ""
"Wrapping the Lucene query using a <classname>org.hibernate.Query</classname>"
msgstr ""

#. Tag: para
#: query.xml:54
#, no-c-format
msgid ""
"Executing the search by calling for example <methodname>list()</methodname> "
"or <methodname>scroll()</methodname>"
msgstr ""

#. Tag: para
#: query.xml:60
#, no-c-format
msgid ""
"To access the querying facilities, you have to use an "
"<classname>FullTextSession</classname>. This Search specific session wraps a "
"regular <classname>org.hibernate.Session</classname> to provide query and "
"indexing capabilities."
msgstr ""

#. Tag: title
#: query.xml:66
#, no-c-format
msgid "Creating a FullTextSession"
msgstr ""

#. Tag: programlisting
#: query.xml:68
#, no-c-format
msgid ""
"Session session = sessionFactory.openSession();\n"
"...\n"
"FullTextSession fullTextSession = Search.getFullTextSession(session);"
msgstr ""

#. Tag: para
#: query.xml:71
#, no-c-format
msgid ""
"The actual search facility is built on native Lucene queries which the "
"following example illustrates."
msgstr ""

#. Tag: title
#: query.xml:75
#, no-c-format
msgid "<title>Creating a Lucene query</title>"
msgstr ""

#. Tag: programlisting
#: query.xml:77
#, no-c-format
msgid ""
"org.apache.lucene.queryParser.QueryParser parser = \n"
"    new QueryParser(\"title\", new StopAnalyzer() );\n"
"\n"
"org.apache.lucene.search.Query luceneQuery = parser.parse( \"summary:Festina "
"Or brand:Seiko\" );\n"
"<emphasis role=\"bold\">org.hibernate.Query fullTextQuery = fullTextSession."
"createFullTextQuery( luceneQuery );\n"
"        </emphasis>\n"
"List result = fullTextQuery.list(); //return a list of managed objects"
msgstr ""

#. Tag: para
#: query.xml:80
#, no-c-format
msgid ""
"The Hibernate query built on top of the Lucene query is a regular "
"<literal>org.hibernate.Query</literal>, which means you are in the same "
"paradigm as the other Hibernate query facilities (HQL, Native or Criteria). "
"The regular <literal>list()</literal> , <literal>uniqueResult()</literal>, "
"<literal>iterate()</literal> and <literal>scroll()</literal> methods can be "
"used."
msgstr ""

#. Tag: para
#: query.xml:87
#, no-c-format
msgid ""
"In case you are using the Java Persistence APIs of Hibernate (aka EJB 3.0 "
"Persistence), the same extensions exist:"
msgstr ""

#. Tag: title
#: query.xml:91
#, no-c-format
msgid "Creating a Search query using the JPA API"
msgstr ""

#. Tag: programlisting
#: query.xml:93
#, no-c-format
msgid ""
"EntityManager em = entityManagerFactory.createEntityManager();\n"
"\n"
"FullTextEntityManager fullTextEntityManager = \n"
"    org.hibernate.search.jpa.Search.getFullTextEntityManager(em);\n"
"\n"
"...\n"
"org.apache.lucene.queryParser.QueryParser parser = \n"
"    new QueryParser(\"title\", new StopAnalyzer() );\n"
"\n"
"org.apache.lucene.search.Query luceneQuery = parser.parse( \"summary:Festina "
"Or brand:Seiko\" );\n"
"<emphasis role=\"bold\">javax.persistence.Query fullTextQuery = "
"fullTextEntityManager.createFullTextQuery( luceneQuery );</emphasis>\n"
"\n"
"List result = fullTextQuery.getResultList(); //return a list of managed "
"objects"
msgstr ""

#. Tag: para
#: query.xml:96
#, no-c-format
msgid ""
"The following examples we will use the Hibernate APIs but the same example "
"can be easily rewritten with the Java Persistence API by just adjusting the "
"way the <classname>FullTextQuery</classname> is retrieved."
msgstr ""

#. Tag: title
#: query.xml:102
#, no-c-format
msgid "Building queries"
msgstr ""

#. Tag: para
#: query.xml:104
#, no-c-format
msgid ""
"Hibernate Search queries are built on top of Lucene queries which gives you "
"total freedom on the type of Lucene query you want to execute. However, once "
"built, Hibernate Search wraps further query processing using <classname>org."
"hibernate.Query</classname> as your primary query manipulation API."
msgstr ""

#. Tag: title
#: query.xml:111
#, no-c-format
msgid "Building a Lucene query"
msgstr ""

#. Tag: para
#: query.xml:113
#, no-c-format
msgid ""
"It is out of the scope of this documentation on how to exactly build a "
"Lucene query. Please refer to the online Lucene documentation or get hold of "
"a copy of either Lucene In Action or Hibernate Search in Action."
msgstr ""

#. Tag: title
#: query.xml:120
#, no-c-format
msgid "Building a Hibernate Search query"
msgstr ""

#. Tag: title
#: query.xml:123
#, no-c-format
msgid "Generality"
msgstr ""

#. Tag: para
#: query.xml:125
#, no-c-format
msgid ""
"Once the Lucene query is built, it needs to be wrapped into an Hibernate "
"Query."
msgstr ""

#. Tag: title
#: query.xml:129
#, no-c-format
msgid "Wrapping a Lucene query into a Hibernate Query"
msgstr ""

#. Tag: programlisting
#: query.xml:131
#, no-c-format
msgid ""
"FullTextSession fullTextSession = Search.getFullTextSession( session );\n"
"org.hibernate.Query fullTextQuery = fullTextSession.createFullTextQuery"
"( luceneQuery );"
msgstr ""

#. Tag: para
#: query.xml:134
#, no-c-format
msgid ""
"If not specified otherwise, the query will be executed against all indexed "
"entities, potentially returning all types of indexed classes. It is advised, "
"from a performance point of view, to restrict the returned types:"
msgstr ""

#. Tag: title
#: query.xml:140
#, no-c-format
msgid "Filtering the search result by entity type"
msgstr ""

#. Tag: programlisting
#: query.xml:142
#, no-c-format
msgid ""
"org.hibernate.Query fullTextQuery = fullTextSession.createFullTextQuery"
"( luceneQuery, Customer.class );\n"
"// or\n"
"fullTextQuery = fullTextSession.createFullTextQuery( luceneQuery, Item."
"class, Actor.class );"
msgstr ""

#. Tag: para
#: query.xml:145
#, no-c-format
msgid ""
"The first example returns only matching <classname>Customer</classname>s, "
"the second returns matching <classname>Actor</classname>s and "
"<classname>Item</classname>s. The type restriction is fully polymorphic "
"which means that if there are two indexed subclasses <classname>Salesman</"
"classname> and <classname>Customer</classname> of the baseclass "
"<classname>Person</classname>, it is possible to just specify "
"<classname>Person.class</classname> in order to filter on result types."
msgstr ""

#. Tag: title
#: query.xml:157
#, no-c-format
msgid "Pagination"
msgstr ""

#. Tag: para
#: query.xml:159
#, no-c-format
msgid ""
"Out of performance reasons it is recommended to restrict the number of "
"returned objects per query. In fact is a very common use case anyway that "
"the user navigates from one page to an other. The way to define pagination "
"is exactly the way you would define pagination in a plain HQL or Criteria "
"query."
msgstr ""

#. Tag: title
#: query.xml:166
#, no-c-format
msgid "Defining pagination for a search query"
msgstr ""

#. Tag: programlisting
#: query.xml:168
#, no-c-format
msgid ""
"org.hibernate.Query fullTextQuery = fullTextSession.createFullTextQuery"
"( luceneQuery, Customer.class );\n"
"fullTextQuery.setFirstResult(15); //start from the 15th element\n"
"fullTextQuery.setMaxResults(10); //return 10 elements"
msgstr ""

#. Tag: para
#: query.xml:172
#, no-c-format
msgid ""
"It is still possible to get the total number of matching elements regardless "
"of the pagination via <methodname>fulltextQuery.</"
"methodname><methodname>getResultSize()</methodname>"
msgstr ""

#. Tag: title
#: query.xml:179
#, no-c-format
msgid "Sorting"
msgstr ""

#. Tag: para
#: query.xml:181
#, no-c-format
msgid ""
"Apache Lucene provides a very flexible and powerful way to sort results. "
"While the default sorting (by relevance) is appropriate most of the time, it "
"can be interesting to sort by one or several other properties. In order to "
"do so set the Lucene Sort object to apply a Lucene sorting strategy."
msgstr ""

#. Tag: title
#: query.xml:188
#, no-c-format
msgid ""
"Specifying a Lucene <classname>Sort</classname> in order to sort the results"
msgstr ""

#. Tag: programlisting
#: query.xml:191
#, no-c-format
msgid ""
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery( query, "
"Book.class );\n"
"org.apache.lucene.search.Sort sort = new Sort(new SortField(\"title\"));\n"
"<emphasis role=\"bold\">query.setSort(sort);</emphasis>\n"
"List results = query.list();"
msgstr ""

#. Tag: para
#: query.xml:194
#, no-c-format
msgid ""
"One can notice the <classname>FullTextQuery</classname> interface which is a "
"sub interface of <classname>org.hibernate.Query</classname>. Be aware that "
"fields used for sorting must not be tokenized."
msgstr ""

#. Tag: title
#: query.xml:201
#, no-c-format
msgid "Fetching strategy"
msgstr ""

#. Tag: para
#: query.xml:203
#, no-c-format
msgid ""
"When you restrict the return types to one class, Hibernate Search loads the "
"objects using a single query. It also respects the static fetching strategy "
"defined in your domain model."
msgstr ""

#. Tag: para
#: query.xml:207
#, no-c-format
msgid ""
"It is often useful, however, to refine the fetching strategy for a specific "
"use case."
msgstr ""

#. Tag: title
#: query.xml:211
#, no-c-format
msgid "Specifying <classname>FetchMode</classname> on a query"
msgstr ""

#. Tag: programlisting
#: query.xml:214
#, no-c-format
msgid ""
"Criteria criteria = s.createCriteria( Book.class ).setFetchMode( \"authors"
"\", FetchMode.JOIN );\n"
"s.createFullTextQuery( luceneQuery ).setCriteriaQuery( criteria );"
msgstr ""

#. Tag: para
#: query.xml:217
#, no-c-format
msgid ""
"In this example, the query will return all Books matching the luceneQuery. "
"The authors collection will be loaded from the same query using an SQL outer "
"join."
msgstr ""

#. Tag: para
#: query.xml:221
#, no-c-format
msgid ""
"When defining a criteria query, it is not needed to restrict the entity "
"types returned while creating the Hibernate Search query from the full text "
"session: the type is guessed from the criteria query itself. Only fetch mode "
"can be adjusted, refrain from applying any other restriction."
msgstr ""

#. Tag: para
#: query.xml:227
#, no-c-format
msgid ""
"One cannot use <methodname>setCriteriaQuery</methodname> if more than one "
"entity type is expected to be returned."
msgstr ""

#. Tag: title
#: query.xml:232
#, no-c-format
msgid "Projection"
msgstr ""

#. Tag: para
#: query.xml:234
#, no-c-format
msgid ""
"For some use cases, returning the domain object (graph) is overkill. Only a "
"small subset of the properties is necessary. Hibernate Search allows you to "
"return a subset of properties:"
msgstr ""

#. Tag: title
#: query.xml:239
#, no-c-format
msgid "Using projection instead of returning the full domain object"
msgstr ""

#. Tag: programlisting
#: query.xml:242
#, no-c-format
msgid ""
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery"
"( luceneQuery, Book.class );\n"
"query.<emphasis role=\"bold\">setProjection( \"id\", \"summary\", \"body\", "
"\"mainAuthor.name\" )</emphasis>;\n"
"List results = query.list();\n"
"Object[] firstResult = (Object[]) results.get(0);\n"
"Integer id = firstResult[0];\n"
"String summary = firstResult[1];\n"
"String body = firstResult[2];\n"
"String authorName = firstResult[3];"
msgstr ""

#. Tag: para
#: query.xml:245
#, no-c-format
msgid ""
"Hibernate Search extracts the properties from the Lucene index and convert "
"them back to their object representation, returning a list of "
"<classname>Object[]</classname>. Projections avoid a potential database "
"round trip (useful if the query response time is critical), but has some "
"constraints:"
msgstr ""

#. Tag: para
#: query.xml:253
#, no-c-format
msgid ""
"the properties projected must be stored in the index (<literal>@Field"
"(store=Store.YES)</literal>), which increase the index size"
msgstr ""

#. Tag: para
#: query.xml:259
#, no-c-format
msgid ""
"the properties projected must use a <literal>FieldBridge</literal> "
"implementing <classname>org.hibernate.search.bridge.TwoWayFieldBridge</"
"classname> or <literal>org.hibernate.search.bridge.TwoWayStringBridge</"
"literal>, the latter being the simpler version. All Hibernate Search built-"
"in types are two-way."
msgstr ""

#. Tag: para
#: query.xml:269
#, no-c-format
msgid ""
"you can only project simple properties of the indexed entity or its embedded "
"associations. This means you cannot project a whole embedded entity."
msgstr ""

#. Tag: para
#: query.xml:275
#, no-c-format
msgid ""
"projection does not work on collections or maps which are indexed via "
"<classname>@IndexedEmbedded</classname>"
msgstr ""

#. Tag: para
#: query.xml:280
#, no-c-format
msgid ""
"Projection is useful for another kind of use cases. Lucene provides some "
"metadata information to the user about the results. By using some special "
"placeholders, the projection mechanism can retrieve them:"
msgstr ""

#. Tag: title
#: query.xml:286
#, no-c-format
msgid "Using projection in order to retrieve meta data"
msgstr ""

#. Tag: programlisting
#: query.xml:288
#, no-c-format
msgid ""
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery"
"( luceneQuery, Book.class );\n"
"query.<emphasis role=\"bold\">setProjection( FullTextQuery.SCORE, "
"FullTextQuery.THIS, \"mainAuthor.name\" )</emphasis>;\n"
"List results = query.list();\n"
"Object[] firstResult = (Object[]) results.get(0);\n"
"float score = firstResult[0];\n"
"Book book = firstResult[1];\n"
"String authorName = firstResult[2];"
msgstr ""

#. Tag: para
#: query.xml:291
#, no-c-format
msgid ""
"You can mix and match regular fields and special placeholders. Here is the "
"list of available placeholders:"
msgstr ""

#. Tag: para
#: query.xml:296
#, no-c-format
msgid ""
"FullTextQuery.THIS: returns the initialized and managed entity (as a non "
"projected query would have done)."
msgstr ""

#. Tag: para
#: query.xml:301
#, no-c-format
msgid ""
"FullTextQuery.DOCUMENT: returns the Lucene Document related to the object "
"projected."
msgstr ""

#. Tag: para
#: query.xml:306
#, no-c-format
msgid "FullTextQuery.OBJECT_CLASS: returns the class of the indexed entity."
msgstr ""

#. Tag: para
#: query.xml:311
#, no-c-format
msgid ""
"FullTextQuery.SCORE: returns the document score in the query. Scores are "
"handy to compare one result against an other for a given query but are "
"useless when comparing the result of different queries."
msgstr ""

#. Tag: para
#: query.xml:318
#, no-c-format
msgid "FullTextQuery.ID: the id property value of the projected object."
msgstr ""

#. Tag: para
#: query.xml:323
#, no-c-format
msgid ""
"FullTextQuery.DOCUMENT_ID: the Lucene document id. Careful, Lucene document "
"id can change overtime between two different IndexReader opening (this "
"feature is experimental)."
msgstr ""

#. Tag: para
#: query.xml:329
#, no-c-format
msgid ""
"FullTextQuery.EXPLANATION: returns the Lucene Explanation object for the "
"matching object/document in the given query. Do not use if you retrieve a "
"lot of data. Running explanation typically is as costly as running the whole "
"Lucene query per matching element. Make sure you use projection!"
msgstr ""

#. Tag: title
#: query.xml:341
#, no-c-format
msgid "Retrieving the results"
msgstr ""

#. Tag: para
#: query.xml:343
#, no-c-format
msgid ""
"Once the Hibernate Search query is built, executing it is in no way "
"different than executing a HQL or Criteria query. The same paradigm and "
"object semantic applies. All the common operations are available: "
"<methodname>list()</methodname>, <methodname>uniqueResult()</methodname>, "
"<methodname>iterate()</methodname>, <methodname>scroll()</methodname>."
msgstr ""

#. Tag: title
#: query.xml:351
#, no-c-format
msgid "Performance considerations"
msgstr ""

#. Tag: para
#: query.xml:353
#, no-c-format
msgid ""
"If you expect a reasonable number of results (for example using pagination) "
"and expect to work on all of them, <methodname>list()</methodname> or "
"<methodname>uniqueResult()</methodname> are recommended. <methodname>list()</"
"methodname> work best if the entity <literal>batch-size</literal> is set up "
"properly. Note that Hibernate Search has to process all Lucene Hits elements "
"(within the pagination) when using <methodname>list()</methodname> , "
"<methodname>uniqueResult()</methodname> and <methodname>iterate()</"
"methodname>."
msgstr ""

#. Tag: para
#: query.xml:364
#, no-c-format
msgid ""
"If you wish to minimize Lucene document loading, <methodname>scroll()</"
"methodname> is more appropriate. Don't forget to close the "
"<classname>ScrollableResults</classname> object when you're done, since it "
"keeps Lucene resources. If you expect to use <methodname>scroll,</"
"methodname> but wish to load objects in batch, you can use <methodname>query."
"setFetchSize()</methodname>. When an object is accessed, and if not already "
"loaded, Hibernate Search will load the next <literal>fetchSize</literal> "
"objects in one pass."
msgstr ""

#. Tag: para
#: query.xml:373
#, no-c-format
msgid "Pagination is a preferred method over scrolling though."
msgstr ""

#. Tag: title
#: query.xml:377
#, no-c-format
msgid "Result size"
msgstr ""

#. Tag: para
#: query.xml:379
#, no-c-format
msgid "It is sometime useful to know the total number of matching documents:"
msgstr ""

#. Tag: para
#: query.xml:384
#, no-c-format
msgid "for the Google-like feature 1-10 of about 888,000,000"
msgstr ""

#. Tag: para
#: query.xml:388
#, no-c-format
msgid "to implement a fast pagination navigation"
msgstr ""

#. Tag: para
#: query.xml:392
#, no-c-format
msgid ""
"to implement a multi step search engine (adding approximation if the "
"restricted query return no or not enough results)"
msgstr ""

#. Tag: para
#: query.xml:397
#, no-c-format
msgid ""
"Of course it would be too costly to retrieve all the matching documents. "
"Hibernate Search allows you to retrieve the total number of matching "
"documents regardless of the pagination parameters. Even more interesting, "
"you can retrieve the number of matching elements without triggering a single "
"object load."
msgstr ""

#. Tag: title
#: query.xml:404
#, no-c-format
msgid "Determining the result size of a query"
msgstr ""

#. Tag: programlisting
#: query.xml:406
#, no-c-format
msgid ""
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery"
"( luceneQuery, Book.class );\n"
"assert 3245 == <emphasis role=\"bold\">query.getResultSize()</emphasis>; //"
"return the number of matching books without loading a single one\n"
"\n"
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery"
"( luceneQuery, Book.class );\n"
"query.setMaxResult(10);\n"
"List results = query.list();\n"
"assert 3245 == <emphasis role=\"bold\">query.getResultSize()</emphasis>; //"
"return the total number of matching books regardless of pagination"
msgstr ""

#. Tag: para
#: query.xml:410
#, no-c-format
msgid ""
"Like Google, the number of results is approximative if the index is not "
"fully up-to-date with the database (asynchronous cluster for example)."
msgstr ""

#. Tag: title
#: query.xml:417
#, no-c-format
msgid "ResultTransformer"
msgstr ""

#. Tag: para
#: query.xml:419
#, no-c-format
msgid ""
"Especially when using projection, the data structure returned by a query (an "
"object array in this case), is not always matching the application needs. It "
"is possible to apply a <classname>ResultTransformer</classname> operation "
"post query to match the targeted data structure:"
msgstr ""

#. Tag: title
#: query.xml:426
#, no-c-format
msgid "Using ResultTransformer in conjunction with projections"
msgstr ""

#. Tag: programlisting
#: query.xml:428
#, no-c-format
msgid ""
"org.hibernate.search.FullTextQuery query = s.createFullTextQuery"
"( luceneQuery, Book.class );\n"
"query.setProjection( \"title\", \"mainAuthor.name\" );\n"
"\n"
"<emphasis role=\"bold\">query.setResultTransformer( \n"
"    new StaticAliasToBeanResultTransformer( BookView.class, \"title\", "
"\"author\" ) \n"
");</emphasis>\n"
"List&lt;BookView&gt; results = (List&lt;BookView&gt;) query.list();\n"
"for(BookView view : results) {\n"
"    log.info( \"Book: \" + view.getTitle() + \", \" + view.getAuthor() );\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:431
#, no-c-format
msgid ""
"Examples of <classname>ResultTransformer</classname> implementations can be "
"found in the Hibernate Core codebase."
msgstr ""

#. Tag: title
#: query.xml:436
#, no-c-format
msgid "Understanding results"
msgstr ""

#. Tag: para
#: query.xml:438
#, no-c-format
msgid ""
"You will find yourself sometimes puzzled by a result showing up in a query "
"or a result not showing up in a query. Luke is a great tool to understand "
"those mysteries. However, Hibernate Search also gives you access to the "
"Lucene <classname>Explanation</classname> object for a given result (in a "
"given query). This class is considered fairly advanced to Lucene users but "
"can provide a good understanding of the scoring of an object. You have two "
"ways to access the Explanation object for a given result:"
msgstr ""

#. Tag: para
#: query.xml:449
#, no-c-format
msgid "Use the <methodname>fullTextQuery.explain(int)</methodname> method"
msgstr ""

#. Tag: para
#: query.xml:454
#, no-c-format
msgid "Use projection"
msgstr ""

#. Tag: para
#: query.xml:458
#, no-c-format
msgid ""
"The first approach takes a document id as a parameter and return the "
"Explanation object. The document id can be retrieved using projection and "
"the <literal>FullTextQuery.DOCUMENT_ID</literal> constant."
msgstr ""

#. Tag: para
#: query.xml:464
#, no-c-format
msgid ""
"The Document id has nothing to do with the entity id. Do not mess up these "
"two notions."
msgstr ""

#. Tag: para
#: query.xml:468
#, no-c-format
msgid ""
"The second approach let's you project the <classname>Explanation</classname> "
"object using the <literal>FullTextQuery.EXPLANATION</literal> constant."
msgstr ""

#. Tag: title
#: query.xml:473
#, no-c-format
msgid "Retrieving the Lucene Explanation object using projection"
msgstr ""

#. Tag: programlisting
#: query.xml:476
#, no-c-format
msgid ""
"FullTextQuery ftQuery = s.createFullTextQuery( luceneQuery, Dvd.class )\n"
"        .setProjection( FullTextQuery.DOCUMENT_ID, <emphasis role=\"bold"
"\">FullTextQuery.EXPLANATION</emphasis>, FullTextQuery.THIS );\n"
"@SuppressWarnings(\"unchecked\") List&lt;Object[]&gt; results = ftQuery.list"
"();\n"
"for (Object[] result : results) {\n"
"    Explanation e = (Explanation) result[1];\n"
"    display( e.toString() );\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:479
#, no-c-format
msgid ""
"Be careful, building the explanation object is quite expensive, it is "
"roughly as expensive as running the Lucene query again. Don't do it if you "
"don't need the object"
msgstr ""

#. Tag: title
#: query.xml:486
#, no-c-format
msgid "Filters"
msgstr ""

#. Tag: para
#: query.xml:488
#, no-c-format
msgid ""
"Apache Lucene has a powerful feature that allows to filter query results "
"according to a custom filtering process. This is a very powerful way to "
"apply additional data restrictions, especially since filters can be cached "
"and reused. Some interesting use cases are:"
msgstr ""

#. Tag: para
#: query.xml:495
#, no-c-format
msgid "security"
msgstr ""

#. Tag: para
#: query.xml:499
#, no-c-format
msgid "temporal data (eg. view only last month's data)"
msgstr ""

#. Tag: para
#: query.xml:503
#, no-c-format
msgid "population filter (eg. search limited to a given category)"
msgstr ""

#. Tag: para
#: query.xml:508
#, no-c-format
msgid "and many more"
msgstr ""

#. Tag: para
#: query.xml:512
#, no-c-format
msgid ""
"Hibernate Search pushes the concept further by introducing the notion of "
"parameterizable named filters which are transparently cached. For people "
"familiar with the notion of Hibernate Core filters, the API is very similar:"
msgstr ""

#. Tag: title
#: query.xml:518
#, no-c-format
msgid "Enabling fulltext filters for a given query"
msgstr ""

#. Tag: programlisting
#: query.xml:520
#, no-c-format
msgid ""
"fullTextQuery = s.createFullTextQuery( query, Driver.class );\n"
"fullTextQuery.enableFullTextFilter(\"bestDriver\");\n"
"fullTextQuery.enableFullTextFilter(\"security\").setParameter( \"login\", "
"\"andre\" );\n"
"fullTextQuery.list(); //returns only best drivers where andre has credentials"
msgstr ""

#. Tag: para
#: query.xml:523
#, no-c-format
msgid ""
"In this example we enabled two filters on top of the query. You can enable "
"(or disable) as many filters as you like."
msgstr ""

#. Tag: para
#: query.xml:526
#, no-c-format
msgid ""
"Declaring filters is done through the <classname>@FullTextFilterDef</"
"classname> annotation. This annotation can be on any <literal>@Indexed</"
"literal> entity regardless of the query the filter is later applied to. This "
"implies that filter definitions are global and their names must be unique. A "
"<classname>SearchException</classname> is thrown in case two different "
"<classname>@FullTextFilterDef</classname> annotations with the same name are "
"defined. Each named filter has to specify its actual filter implementation."
msgstr ""

#. Tag: title
#: query.xml:537
#, no-c-format
msgid "Defining and implementing a Filter"
msgstr ""

#. Tag: programlisting
#: query.xml:539
#, no-c-format
msgid ""
"@Entity\n"
"@Indexed\n"
"@FullTextFilterDefs( {\n"
"    <emphasis role=\"bold\">@FullTextFilterDef(name = \"bestDriver\", impl = "
"BestDriversFilter.class)</emphasis>, \n"
"    <emphasis role=\"bold\">@FullTextFilterDef(name = \"security\", impl = "
"SecurityFilterFactory.class)</emphasis> \n"
"})\n"
"public class Driver { ... }"
msgstr ""

#. Tag: programlisting
#: query.xml:541
#, no-c-format
msgid ""
"public class BestDriversFilter extends <emphasis\n"
"          role=\"bold\">org.apache.lucene.search.Filter</emphasis> {\n"
"\n"
"    public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n"
"        OpenBitSet bitSet = new OpenBitSet( reader.maxDoc() );\n"
"        TermDocs termDocs = reader.termDocs( new Term( \"score\", "
"\"5\" ) );\n"
"        while ( termDocs.next() ) {\n"
"            bitSet.set( termDocs.doc() );\n"
"        }\n"
"        return bitSet;\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:544
#, no-c-format
msgid ""
"<classname>BestDriversFilter</classname> is an example of a simple Lucene "
"filter which reduces the result set to drivers whose score is 5. In this "
"example the specified filter implements the <literal>org.apache.lucene."
"search.Filter</literal> directly and contains a no-arg constructor."
msgstr ""

#. Tag: para
#: query.xml:550
#, no-c-format
msgid ""
"If your Filter creation requires additional steps or if the filter you want "
"to use does not have a no-arg constructor, you can use the factory pattern:"
msgstr ""

#. Tag: title
#: query.xml:555
#, no-c-format
msgid "Creating a filter using the factory pattern"
msgstr ""

#. Tag: programlisting
#: query.xml:557
#, no-c-format
msgid ""
"@Entity\n"
"@Indexed\n"
"@FullTextFilterDef(name = \"bestDriver\", impl = BestDriversFilterFactory."
"class)\n"
"public class Driver { ... }\n"
"\n"
"public class BestDriversFilterFactory {\n"
"\n"
"    <emphasis role=\"bold\">@Factory</emphasis>\n"
"    public Filter getFilter() {\n"
"        //some additional steps to cache the filter results per IndexReader\n"
"        Filter bestDriversFilter = new BestDriversFilter();\n"
"        return new CachingWrapperFilter(bestDriversFilter);\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:560
#, no-c-format
msgid ""
"Hibernate Search will look for a <literal>@Factory</literal> annotated "
"method and use it to build the filter instance. The factory must have a no-"
"arg constructor. For people familiar with JBoss Seam, this is similar to the "
"component factory pattern, but the annotation is different!"
msgstr ""

#. Tag: para
#: query.xml:566
#, no-c-format
msgid ""
"Named filters come in handy where parameters have to be passed to the "
"filter. For example a security filter might want to know which security "
"level you want to apply:"
msgstr ""

#. Tag: title
#: query.xml:571
#, no-c-format
msgid "Passing parameters to a defined filter"
msgstr ""

#. Tag: programlisting
#: query.xml:573
#, no-c-format
msgid ""
"fullTextQuery = s.createFullTextQuery( query, Driver.class );\n"
"fullTextQuery.enableFullTextFilter(\"security\")<emphasis role=\"bold\">."
"setParameter( \"level\", 5 )</emphasis>;"
msgstr ""

#. Tag: para
#: query.xml:576
#, no-c-format
msgid ""
"Each parameter name should have an associated setter on either the filter or "
"filter factory of the targeted named filter definition."
msgstr ""

#. Tag: title
#: query.xml:580
#, no-c-format
msgid "Using parameters in the actual filter implementation"
msgstr ""

#. Tag: programlisting
#: query.xml:582
#, no-c-format
msgid ""
"public class SecurityFilterFactory {\n"
"    private Integer level;\n"
"\n"
"    /**\n"
"     * injected parameter\n"
"     */\n"
"    <emphasis role=\"bold\">public void setLevel(Integer level)</emphasis> "
"{\n"
"        this.level = level;\n"
"    }\n"
"\n"
"    <emphasis role=\"bold\">@Key\n"
"    public FilterKey getKey()</emphasis> {\n"
"        StandardFilterKey key = new StandardFilterKey();\n"
"        key.addParameter( level );\n"
"        return key;\n"
"    }\n"
"\n"
"    @Factory\n"
"    public Filter getFilter() {\n"
"        Query query = new TermQuery( new Term(\"level\", level.toString"
"() ) );\n"
"        return new CachingWrapperFilter( new QueryWrapperFilter(query) );\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:585
#, no-c-format
msgid ""
"Note the method annotated <classname>@Key</classname> returning a "
"<classname>FilterKey</classname> object. The returned object has a special "
"contract: the key object must implement <methodname>equals()</methodname> / "
"<methodname>hashCode()</methodname> so that 2 keys are equal if and only if "
"the given <classname>Filter</classname> types are the same and the set of "
"parameters are the same. In other words, 2 filter keys are equal if and only "
"if the filters from which the keys are generated can be interchanged. The "
"key object is used as a key in the cache mechanism."
msgstr ""

#. Tag: para
#: query.xml:594
#, no-c-format
msgid "<classname>@Key</classname> methods are needed only if:"
msgstr ""

#. Tag: para
#: query.xml:598
#, no-c-format
msgid "you enabled the filter caching system (enabled by default)"
msgstr ""

#. Tag: para
#: query.xml:603
#, no-c-format
msgid "your filter has parameters"
msgstr ""

#. Tag: para
#: query.xml:607
#, no-c-format
msgid ""
"In most cases, using the <literal>StandardFilterKey</literal> implementation "
"will be good enough. It delegates the <methodname>equals()</methodname> / "
"<methodname>hashCode()</methodname> implementation to each of the parameters "
"equals and hashcode methods."
msgstr ""

#. Tag: para
#: query.xml:613
#, no-c-format
msgid ""
"As mentioned before the defined filters are per default cached and the cache "
"uses a combination of hard and soft references to allow disposal of memory "
"when needed. The hard reference cache keeps track of the most recently used "
"filters and transforms the ones least used to <classname>SoftReferences</"
"classname> when needed. Once the limit of the hard reference cache is "
"reached additional filters are cached as <classname>SoftReferences</"
"classname>. To adjust the size of the hard reference cache, use "
"<literal>hibernate.search.filter.cache_strategy.size</literal> (defaults to "
"128). For advanced use of filter caching, you can implement your own "
"<classname>FilterCachingStrategy</classname>. The classname is defined by "
"<literal>hibernate.search.filter.cache_strategy</literal>."
msgstr ""

#. Tag: para
#: query.xml:626
#, no-c-format
msgid ""
"This filter caching mechanism should not be confused with caching the actual "
"filter results. In Lucene it is common practice to wrap filters using the "
"<classname>IndexReader</classname> around a <classname>CachingWrapperFilter."
"</classname> The wrapper will cache the <classname>DocIdSet</classname> "
"returned from the <methodname>getDocIdSet(IndexReader reader)</methodname> "
"method to avoid expensive recomputation. It is important to mention that the "
"computed <classname>DocIdSet</classname> is only cachable for the same "
"<classname>IndexReader</classname> instance, because the reader effectively "
"represents the state of the index at the moment it was opened. The document "
"list cannot change within an opened <classname>IndexReader</classname>. A "
"different/new<classname> IndexReader</classname> instance, however, works "
"potentially on a different set of <classname>Document</classname>s (either "
"from a different index or simply because the index has changed), hence the "
"cached <classname>DocIdSet</classname> has to be recomputed."
msgstr ""

#. Tag: para
#: query.xml:643
#, no-c-format
msgid ""
"Hibernate Search also helps with this aspect of caching. Per default the "
"<literal>cache</literal> flag of <classname>@FullTextFilterDef </"
"classname>is set to <literal>FilterCacheModeType."
"INSTANCE_AND_DOCIDSETRESULTS</literal> which will automatically cache the "
"filter instance as well as wrap the specified filter around a Hibernate "
"specific implementation of <classname>CachingWrapperFilter</classname> "
"(<classname>org.hibernate.search.filter.CachingWrapperFilter</classname>). "
"In contrast to Lucene's version of this class <classname>SoftReference</"
"classname>s are used together with a hard reference count (see discussion "
"about filter cache). The hard reference count can be adjusted using "
"<literal>hibernate.search.filter.cache_docidresults.size</literal> (defaults "
"to 5). The wrapping behaviour can be controlled using the "
"<literal>@FullTextFilterDef.cache</literal> parameter. There are three "
"different values for this parameter:"
msgstr ""

#. Tag: entry
#: query.xml:664
#, no-c-format
msgid "Value"
msgstr ""

#. Tag: entry
#: query.xml:666
#, no-c-format
msgid "Definition"
msgstr ""

#. Tag: entry
#: query.xml:672
#, no-c-format
msgid "FilterCacheModeType.NONE"
msgstr ""

#. Tag: entry
#: query.xml:674
#, no-c-format
msgid ""
"No filter instance and no result is cached by Hibernate Search. For every "
"filter call, a new filter instance is created. This setting might be useful "
"for rapidly changing data sets or heavily memory constrained environments."
msgstr ""

#. Tag: entry
#: query.xml:681
#, no-c-format
msgid "FilterCacheModeType.INSTANCE_ONLY"
msgstr ""

#. Tag: entry
#: query.xml:683
#, no-c-format
msgid ""
"The filter instance is cached and reused across concurrent "
"<methodname>Filter.getDocIdSet()</methodname> calls. <classname>DocIdSet</"
"classname> results are not cached. This setting is useful when a filter uses "
"its own specific caching mechanism or the filter results change dynamically "
"due to application specific events making <classname>DocIdSet</classname> "
"caching in both cases unnecessary."
msgstr ""

#. Tag: entry
#: query.xml:695
#, no-c-format
msgid "FilterCacheModeType.INSTANCE_AND_DOCIDSETRESULTS"
msgstr ""

#. Tag: entry
#: query.xml:697
#, no-c-format
msgid ""
"Both the filter instance and the <classname>DocIdSet</classname> results are "
"cached. This is the default value."
msgstr ""

#. Tag: para
#: query.xml:702
#, no-c-format
msgid ""
"Last but not least - why should filters be cached? There are two areas where "
"filter caching shines:"
msgstr ""

#. Tag: para
#: query.xml:708
#, no-c-format
msgid ""
"the system does not update the targeted entity index often (in other words, "
"the IndexReader is reused a lot)"
msgstr ""

#. Tag: para
#: query.xml:713
#, no-c-format
msgid ""
"the Filter's DocIdSet is expensive to compute (compared to the time spent to "
"execute the query)"
msgstr ""

#. Tag: title
#: query.xml:719
#, no-c-format
msgid "Using filters in a sharded environment"
msgstr ""

#. Tag: para
#: query.xml:721
#, no-c-format
msgid ""
"It is possible, in a sharded environment to execute queries on a subset of "
"the available shards. This can be done in two steps:"
msgstr ""

#. Tag: para
#: query.xml:726
#, no-c-format
msgid ""
"create a sharding strategy that does select a subset of "
"<classname>DirectoryProvider</classname>s depending on sone filter "
"configuration"
msgstr ""

#. Tag: para
#: query.xml:732
#, no-c-format
msgid "activate the proper filter at query time"
msgstr ""

#. Tag: para
#: query.xml:736
#, no-c-format
msgid ""
"Let's first look at an example of sharding strategy that query on a specific "
"customer shard if the customer filter is activated."
msgstr ""

#. Tag: programlisting
#: query.xml:739
#, no-c-format
msgid ""
"public class CustomerShardingStrategy implements IndexShardingStrategy {\n"
"\n"
"        // stored DirectoryProviders in a array indexed by customerID\n"
"        private DirectoryProvider&lt;?&gt;[] providers;\n"
"        \n"
"        public void initialize(Properties properties, DirectoryProvider&lt;?"
"&gt;[] providers) {\n"
"                this.providers = providers;\n"
"        }\n"
"\n"
"        public DirectoryProvider&lt;?&gt;[] getDirectoryProvidersForAllShards"
"() {\n"
"                return providers;\n"
"        }\n"
"\n"
"        public DirectoryProvider&lt;?&gt; getDirectoryProviderForAddition"
"(Class&lt;?&gt; entity, Serializable id, String idInString, Document "
"document) {\n"
"                Integer customerID = Integer.parseInt(document.getField"
"(\"customerID\").stringValue());\n"
"                return providers[customerID];\n"
"        }\n"
"\n"
"        public DirectoryProvider&lt;?&gt;[] getDirectoryProvidersForDeletion"
"(Class&lt;?&gt; entity, Serializable id, String idInString) {\n"
"                return getDirectoryProvidersForAllShards();\n"
"        }\n"
"\n"
"<emphasis role=\"bold\">        /**\n"
"         * Optimization; don't search ALL shards and union the results; in "
"this case, we \n"
"         * can be certain that all the data for a particular customer Filter "
"is in a single\n"
"         * shard; simply return that shard by customerID.\n"
"         */\n"
"        public DirectoryProvider&lt;?&gt;[] getDirectoryProvidersForQuery"
"(FullTextFilterImplementor[] filters) {\n"
"                FFullTextFilter filter = getCustomerFilter(filters, "
"\"customer\");\n"
"                if (filter == null) {\n"
"                        return getDirectoryProvidersForAllShards();\n"
"                }\n"
"                else {\n"
"                        return new DirectoryProvider[] { providers[Integer."
"parseInt(filter.getParameter(\"customerID\").toString())] };\n"
"                }\n"
"        }\n"
"\n"
"        private FullTextFilter getFilter(FullTextFilterImplementor[] "
"filters, String name) {\n"
"                for (FullTextFilterImplementor filter: filters) {\n"
"                        if (filter.getName().equals(name)) return filter;\n"
"                }\n"
"                return null;\n"
"        }</emphasis>\n"
"\n"
"}"
msgstr ""

#. Tag: para
#: query.xml:741
#, no-c-format
msgid ""
"In this example, if the filter named <literal>customer</literal> is present, "
"we make sure to only use the shard dedicated to this customer. Otherwise, we "
"return all shards. A given Sharding strategy can react to one or more "
"filters and depends on their parameters."
msgstr ""

#. Tag: para
#: query.xml:746
#, no-c-format
msgid ""
"The second step is simply to activate the filter at query time. While the "
"filter can be a regular filter (as defined in <xref linkend=\"query-filter\"/"
">) which also filters Lucene results after the query, you can make use of a "
"special filter that will only be passed to the sharding strategy and "
"otherwise ignored for the rest of the query. Simply use the "
"<classname>ShardSensitiveOnlyFilter</classname> class when declaring your "
"filter."
msgstr ""

#. Tag: programlisting
#: query.xml:754
#, no-c-format
msgid ""
"@Entity @Indexed\n"
"<emphasis role=\"bold\">@FullTextFilterDef(name=\"customer\", "
"impl=ShardSensitiveOnlyFilter.class)</emphasis>\n"
"public class Customer {\n"
"   ...\n"
"}\n"
"\n"
"\n"
"FullTextQuery query = ftEm.createFullTextQuery(luceneQuery, Customer."
"class);\n"
"<emphasis role=\"bold\">query.enableFulltextFilter(\"customer\").setParameter"
"(\"CustomerID\", 5);</emphasis>\n"
"@SuppressWarnings(\"unchecked\")\n"
"List&lt;Customer&gt; results = query.getResultList();"
msgstr ""

#. Tag: para
#: query.xml:756
#, no-c-format
msgid ""
"Note that by using the <classname>ShardSensitiveOnlyFilter</classname>, you "
"do not have to implement any Lucene filter. Using filters and sharding "
"strategy reacting to these filters is recommended to speed up queries in a "
"sharded environment."
msgstr ""

#. Tag: title
#: query.xml:765
#, no-c-format
msgid "Optimizing the query process"
msgstr ""

#. Tag: para
#: query.xml:767
#, no-c-format
msgid "Query performance depends on several criteria:"
msgstr ""

#. Tag: para
#: query.xml:771
#, no-c-format
msgid "the Lucene query itself: read the literature on this subject"
msgstr ""

#. Tag: para
#: query.xml:776
#, no-c-format
msgid ""
"the number of object loaded: use pagination (always ;-) ) or index "
"projection (if needed)"
msgstr ""

#. Tag: para
#: query.xml:781
#, no-c-format
msgid ""
"the way Hibernate Search interacts with the Lucene readers: defines the "
"appropriate <xref linkend=\"search-architecture-readerstrategy\"/>."
msgstr ""

#. Tag: title
#: query.xml:789
#, no-c-format
msgid "Native Lucene Queries"
msgstr ""

#. Tag: para
#: query.xml:791
#, no-c-format
msgid ""
"If you wish to use some specific features of Lucene, you can always run "
"Lucene specific queries. Check <xref linkend=\"search-lucene-native\"/> for "
"more information."
msgstr ""
